// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p15
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_MESSENGERC_ECULNI_H_
#define _TAO_IDL_MESSENGERC_ECULNI_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "Messenger_export.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/BD_String_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO Messenger_Export

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_ch.cpp:38

const CORBA::Long MAX_NAME_LEN = 128;

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_ch.cpp:38

const CORBA::Long MAX_FILE_SIZE = 100000;

// TAO_IDL - Generated from
// be/be_visitor_array/array_ch.cpp:54

typedef ::TAO::String_Manager StringArray[100];
typedef ::TAO::String_Manager StringArray_slice;
struct StringArray_tag {};


typedef
  TAO_VarArray_Var_T<
      StringArray,
      StringArray_slice,
      StringArray_tag
    >
  StringArray_var;

typedef
  TAO_Array_Out_T<
      StringArray,
      StringArray_var,
      StringArray_slice,
      StringArray_tag
    >
  StringArray_out;

typedef
  TAO_Array_Forany_T<
      StringArray,
      StringArray_slice,
      StringArray_tag
    >
  StringArray_forany;

TAO_EXPORT_MACRO StringArray_slice *
StringArray_alloc (void);

TAO_EXPORT_MACRO void
StringArray_free (
    StringArray_slice *_tao_slice);

TAO_EXPORT_MACRO StringArray_slice *
StringArray_dup (
    const StringArray_slice *_tao_slice);

TAO_EXPORT_MACRO void
StringArray_copy (
    StringArray_slice *_tao_to,
    const StringArray_slice *_tao_from);

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:407

typedef char * NameType;
typedef ::CORBA::String_var NameType_var;
typedef ::CORBA::String_out NameType_out;

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_BINARYCONTENTSTYPE_CH_)
#define _BINARYCONTENTSTYPE_CH_

class BinaryContentsType;

typedef
  ::TAO_FixedSeq_Var_T<
      BinaryContentsType
    >
  BinaryContentsType_var;

typedef
  ::TAO_Seq_Out_T<
      BinaryContentsType
    >
  BinaryContentsType_out;

class Messenger_Export BinaryContentsType
  : public
      ::TAO::bounded_value_sequence<
          ::CORBA::Octet,
          100000
        >
{
public:
  BinaryContentsType (void);
  BinaryContentsType (
    ::CORBA::ULong length,
    ::CORBA::Octet* buffer,
    ::CORBA::Boolean release = false);
  BinaryContentsType (const BinaryContentsType &);
  virtual ~BinaryContentsType (void);
  

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  
  typedef BinaryContentsType_var _var_type;
  typedef BinaryContentsType_out _out_type;
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace Messenger
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct timespec;

  typedef
    ::TAO_Fixed_Var_T<
        timespec
      >
    timespec_var;

  typedef
    timespec &
    timespec_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct Messenger_Export timespec
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef timespec_var _var_type;
    typedef timespec_out _out_type;
    
    ::CORBA::Long tv_sec;
    ::CORBA::Long tv_nsec;
  };

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct Message;

  typedef
    ::TAO_Var_Var_T<
        Message
      >
    Message_var;

  typedef
    ::TAO_Out_T<
        Message
      >
    Message_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct Messenger_Export Message
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef Message_var _var_type;
    typedef Message_out _out_type;
    
    ::TAO::String_Manager text;
    ::CORBA::Long count;
    Messenger::timespec time_stamp;
    ::CORBA::Char subject;
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module Messenger

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  template<>
  class Arg_Traits< ::StringArray_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::StringArray_out,
            ::StringArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#if !defined (_NAMETYPE128__ARG_TRAITS_)
#define _NAMETYPE128__ARG_TRAITS_

  struct NameType_128 {};

  template<>
  class Arg_Traits<NameType_128>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            128,
            TAO::Any_Insert_Policy_Noop
        >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::BinaryContentsType>
    : public
        Var_Size_Arg_Traits_T<
            ::BinaryContentsType,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Messenger::timespec>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Messenger::timespec,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Messenger::Message>
    : public
        Var_Size_Arg_Traits_T<
            ::Messenger::Message,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct Messenger_Export Array_Traits<
      StringArray_forany
    >
  {
    static void free (
        StringArray_slice * _tao_slice);
    static StringArray_slice * dup (
        const StringArray_slice * _tao_slice);
    static void copy (
        StringArray_slice * _tao_to,
        const StringArray_slice * _tao_from);
    static StringArray_slice * alloc (void);
    static void zero (
        StringArray_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

Messenger_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ::StringArray_forany &_tao_array);
Messenger_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ::StringArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_BinaryContentsType_H_
#define _TAO_CDR_OP_BinaryContentsType_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


Messenger_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const BinaryContentsType &_tao_sequence);
Messenger_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    BinaryContentsType &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_BinaryContentsType_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

Messenger_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Messenger::timespec &);
Messenger_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Messenger::timespec &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

Messenger_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Messenger::Message &);
Messenger_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Messenger::Message &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "MessengerC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

